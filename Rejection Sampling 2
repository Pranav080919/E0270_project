"""
In this program, we shall try to sample from a mixture of three uniform distributions with different means. Efficiency
of rejection sampling is again quantified as its acceptance ratio.
"""

import numpy as np
import scipy.stats as st
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.integrate import quad
sns.set()


def p(x):
    return 4*st.uniform.pdf(x, -30, 60) + 2*st.uniform.pdf(x, -50, 15) + st.uniform.pdf(x, 10, 40)

def q(x):
    return st.norm.pdf(x, -17, 38)

x = np.arange(-100, 100)

M = max(p(x)/q(x))

A, err = quad(p, -100, 100)
#print(A) #Normalizing constant - divide by A to normalize

def t(x):
    return p(x)/A

def rejection_sampling(steps):
    samples = []
    accept = 0
    total = 0
    for i in range(steps):
        z = np.random.normal(-17, 38)
        u = np.random.uniform(0, 1)
        if u <= p(z)/(M*q(z)):
            samples.append(z)
            accept += 1
            total += 1
        else:
            total += 1
    print(f"\nAccept ratio: {accept/total}")
    return np.array(samples)


if __name__ == '__main__':
    plt.title("Rejection Sampling")
    plt.plot(x, p(x), label="target distribution")
    plt.plot(x, M*q(x), label="easy distribution")
    plt.plot(x, t(x), label="normalized target distribution")
    s = rejection_sampling(100000)
    plt.hist(s, density=True, bins=range(-100, 100 + 1, 1), label="samples histogram")
    plt.legend()
    plt.show()
